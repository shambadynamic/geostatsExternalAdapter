"use strict";
exports["src/schema/v1/event.json"] = validate20;
const schema22 = { "$ref": "#/definitions/event", "definitions": { "specversion": { "type": "string", "minLength": 1, "const": "1.0" }, "datacontenttype": { "type": "string" }, "data": { "type": ["object", "string", "array", "number", "boolean", "null"] }, "data_base64": { "type": "string" }, "event": { "properties": { "specversion": { "$ref": "#/definitions/specversion" }, "datacontenttype": { "$ref": "#/definitions/datacontenttype" }, "data": { "$ref": "#/definitions/data" }, "data_base64": { "$ref": "#/definitions/data_base64" }, "id": { "$ref": "#/definitions/id" }, "time": { "$ref": "#/definitions/time" }, "dataschema": { "$ref": "#/definitions/dataschema" }, "subject": { "$ref": "#/definitions/subject" }, "type": { "$ref": "#/definitions/type" }, "source": { "$ref": "#/definitions/source" } }, "required": ["specversion", "id", "type", "source"], "type": "object" }, "id": { "type": "string", "minLength": 1 }, "time": { "format": "js-date-time", "type": "string" }, "dataschema": { "type": "string", "format": "uri" }, "subject": { "type": "string", "minLength": 1 }, "type": { "type": "string", "minLength": 1 }, "source": { "format": "uri-reference", "type": "string" } }, "type": "object" };
const schema23 = { "properties": { "specversion": { "$ref": "#/definitions/specversion" }, "datacontenttype": { "$ref": "#/definitions/datacontenttype" }, "data": { "$ref": "#/definitions/data" }, "data_base64": { "$ref": "#/definitions/data_base64" }, "id": { "$ref": "#/definitions/id" }, "time": { "$ref": "#/definitions/time" }, "dataschema": { "$ref": "#/definitions/dataschema" }, "subject": { "$ref": "#/definitions/subject" }, "type": { "$ref": "#/definitions/type" }, "source": { "$ref": "#/definitions/source" } }, "required": ["specversion", "id", "type", "source"], "type": "object" };
const schema24 = { "type": "string", "minLength": 1, "const": "1.0" };
const schema25 = { "type": "string" };
const schema26 = { "type": ["object", "string", "array", "number", "boolean", "null"] };
const schema27 = { "type": "string" };
const schema28 = { "type": "string", "minLength": 1 };
const schema29 = { "format": "js-date-time", "type": "string" };
const schema30 = { "type": "string", "format": "uri" };
const schema31 = { "type": "string", "minLength": 1 };
const schema32 = { "type": "string", "minLength": 1 };
const schema33 = { "format": "uri-reference", "type": "string" };
const func8 = require("ajv/dist/runtime/ucs2length").default;
const formats0 = require("ajv-formats/dist/formats").fullFormats["js-date-time"];
const formats2 = require("ajv-formats/dist/formats").fullFormats.uri;
const formats4 = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
function validate21(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.specversion === undefined) && (missing0 = "specversion")) || ((data.id === undefined) && (missing0 = "id"))) || ((data.type === undefined) && (missing0 = "type"))) || ((data.source === undefined) && (missing0 = "source"))) {
            validate21.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.specversion !== undefined) {
                let data0 = data.specversion;
                const _errs1 = errors;
                const _errs2 = errors;
                if ("1.0" !== data0) {
                    validate21.errors = [{ instancePath: instancePath + "/specversion", schemaPath: "#/definitions/specversion/const", keyword: "const", params: { allowedValue: "1.0" }, message: "must be equal to constant" }];
                    return false;
                }
                if (errors === _errs2) {
                    if (typeof data0 === "string") {
                        if (func8(data0) < 1) {
                            validate21.errors = [{ instancePath: instancePath + "/specversion", schemaPath: "#/definitions/specversion/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                            return false;
                        }
                    }
                    else {
                        validate21.errors = [{ instancePath: instancePath + "/specversion", schemaPath: "#/definitions/specversion/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.datacontenttype !== undefined) {
                    const _errs4 = errors;
                    if (typeof data.datacontenttype !== "string") {
                        validate21.errors = [{ instancePath: instancePath + "/datacontenttype", schemaPath: "#/definitions/datacontenttype/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs4 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data2 = data.data;
                        const _errs7 = errors;
                        if ((((typeof data2 != "object") && (typeof data2 !== "string")) && (!((typeof data2 == "number") && (isFinite(data2))))) && (typeof data2 !== "boolean")) {
                            validate21.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/definitions/data/type", keyword: "type", params: { type: schema26.type }, message: "must be object,string,array,number,boolean,null" }];
                            return false;
                        }
                        var valid0 = _errs7 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.data_base64 !== undefined) {
                            const _errs10 = errors;
                            if (typeof data.data_base64 !== "string") {
                                validate21.errors = [{ instancePath: instancePath + "/data_base64", schemaPath: "#/definitions/data_base64/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                return false;
                            }
                            var valid0 = _errs10 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.id !== undefined) {
                                let data4 = data.id;
                                const _errs13 = errors;
                                const _errs14 = errors;
                                if (errors === _errs14) {
                                    if (typeof data4 === "string") {
                                        if (func8(data4) < 1) {
                                            validate21.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/definitions/id/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                            return false;
                                        }
                                    }
                                    else {
                                        validate21.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/definitions/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                        return false;
                                    }
                                }
                                var valid0 = _errs13 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.time !== undefined) {
                                    let data5 = data.time;
                                    const _errs16 = errors;
                                    const _errs17 = errors;
                                    if (errors === _errs17) {
                                        if (errors === _errs17) {
                                            if (typeof data5 === "string") {
                                                if (!(formats0(data5))) {
                                                    validate21.errors = [{ instancePath: instancePath + "/time", schemaPath: "#/definitions/time/format", keyword: "format", params: { format: "js-date-time" }, message: "must match format \"" + "js-date-time" + "\"" }];
                                                    return false;
                                                }
                                            }
                                            else {
                                                validate21.errors = [{ instancePath: instancePath + "/time", schemaPath: "#/definitions/time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                        }
                                    }
                                    var valid0 = _errs16 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.dataschema !== undefined) {
                                        let data6 = data.dataschema;
                                        const _errs19 = errors;
                                        const _errs20 = errors;
                                        if (errors === _errs20) {
                                            if (errors === _errs20) {
                                                if (typeof data6 === "string") {
                                                    if (!(formats2(data6))) {
                                                        validate21.errors = [{ instancePath: instancePath + "/dataschema", schemaPath: "#/definitions/dataschema/format", keyword: "format", params: { format: "uri" }, message: "must match format \"" + "uri" + "\"" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate21.errors = [{ instancePath: instancePath + "/dataschema", schemaPath: "#/definitions/dataschema/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                            }
                                        }
                                        var valid0 = _errs19 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.subject !== undefined) {
                                            let data7 = data.subject;
                                            const _errs22 = errors;
                                            const _errs23 = errors;
                                            if (errors === _errs23) {
                                                if (typeof data7 === "string") {
                                                    if (func8(data7) < 1) {
                                                        validate21.errors = [{ instancePath: instancePath + "/subject", schemaPath: "#/definitions/subject/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate21.errors = [{ instancePath: instancePath + "/subject", schemaPath: "#/definitions/subject/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                            }
                                            var valid0 = _errs22 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.type !== undefined) {
                                                let data8 = data.type;
                                                const _errs25 = errors;
                                                const _errs26 = errors;
                                                if (errors === _errs26) {
                                                    if (typeof data8 === "string") {
                                                        if (func8(data8) < 1) {
                                                            validate21.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/definitions/type/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                                            return false;
                                                        }
                                                    }
                                                    else {
                                                        validate21.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/definitions/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                        return false;
                                                    }
                                                }
                                                var valid0 = _errs25 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                            if (valid0) {
                                                if (data.source !== undefined) {
                                                    let data9 = data.source;
                                                    const _errs28 = errors;
                                                    const _errs29 = errors;
                                                    if (errors === _errs29) {
                                                        if (errors === _errs29) {
                                                            if (typeof data9 === "string") {
                                                                if (!(formats4.test(data9))) {
                                                                    validate21.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/definitions/source/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }];
                                                                    return false;
                                                                }
                                                            }
                                                            else {
                                                                validate21.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/definitions/source/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                                return false;
                                                            }
                                                        }
                                                    }
                                                    var valid0 = _errs28 === errors;
                                                }
                                                else {
                                                    var valid0 = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate21.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate21.errors = vErrors; return errors === 0; }
function validate20(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate20.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} if (!(validate21(data, { instancePath, parentData, parentDataProperty, rootData }))) {
    vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
    errors = vErrors.length;
} validate20.errors = vErrors; return errors === 0; }
exports["src/schema/v03/event.json"] = validate23;
const schema34 = { "$ref": "#/definitions/event", "definitions": { "specversion": { "const": "0.3" }, "datacontenttype": { "type": "string" }, "data": { "type": ["object", "string", "array", "number", "boolean", "null"] }, "event": { "properties": { "specversion": { "$ref": "#/definitions/specversion" }, "datacontenttype": { "$ref": "#/definitions/datacontenttype" }, "data": { "$ref": "#/definitions/data" }, "id": { "$ref": "#/definitions/id" }, "time": { "$ref": "#/definitions/time" }, "schemaurl": { "$ref": "#/definitions/schemaurl" }, "subject": { "$ref": "#/definitions/subject" }, "type": { "$ref": "#/definitions/type" }, "source": { "$ref": "#/definitions/source" } }, "required": ["specversion", "id", "type", "source"], "type": "object" }, "id": { "type": "string", "minLength": 1 }, "time": { "format": "js-date-time", "type": "string" }, "schemaurl": { "type": "string", "format": "uri-reference" }, "subject": { "type": "string", "minLength": 1 }, "type": { "type": "string", "minLength": 1 }, "source": { "format": "uri-reference", "type": "string" } }, "type": "object" };
const schema35 = { "properties": { "specversion": { "$ref": "#/definitions/specversion" }, "datacontenttype": { "$ref": "#/definitions/datacontenttype" }, "data": { "$ref": "#/definitions/data" }, "id": { "$ref": "#/definitions/id" }, "time": { "$ref": "#/definitions/time" }, "schemaurl": { "$ref": "#/definitions/schemaurl" }, "subject": { "$ref": "#/definitions/subject" }, "type": { "$ref": "#/definitions/type" }, "source": { "$ref": "#/definitions/source" } }, "required": ["specversion", "id", "type", "source"], "type": "object" };
const schema36 = { "const": "0.3" };
const schema37 = { "type": "string" };
const schema38 = { "type": ["object", "string", "array", "number", "boolean", "null"] };
const schema39 = { "type": "string", "minLength": 1 };
const schema40 = { "format": "js-date-time", "type": "string" };
const schema41 = { "type": "string", "format": "uri-reference" };
const schema42 = { "type": "string", "minLength": 1 };
const schema43 = { "type": "string", "minLength": 1 };
const schema44 = { "format": "uri-reference", "type": "string" };
function validate24(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((((data.specversion === undefined) && (missing0 = "specversion")) || ((data.id === undefined) && (missing0 = "id"))) || ((data.type === undefined) && (missing0 = "type"))) || ((data.source === undefined) && (missing0 = "source"))) {
            validate24.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.specversion !== undefined) {
                const _errs1 = errors;
                if ("0.3" !== data.specversion) {
                    validate24.errors = [{ instancePath: instancePath + "/specversion", schemaPath: "#/definitions/specversion/const", keyword: "const", params: { allowedValue: "0.3" }, message: "must be equal to constant" }];
                    return false;
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.datacontenttype !== undefined) {
                    const _errs3 = errors;
                    if (typeof data.datacontenttype !== "string") {
                        validate24.errors = [{ instancePath: instancePath + "/datacontenttype", schemaPath: "#/definitions/datacontenttype/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                        return false;
                    }
                    var valid0 = _errs3 === errors;
                }
                else {
                    var valid0 = true;
                }
                if (valid0) {
                    if (data.data !== undefined) {
                        let data2 = data.data;
                        const _errs6 = errors;
                        if ((((typeof data2 != "object") && (typeof data2 !== "string")) && (!((typeof data2 == "number") && (isFinite(data2))))) && (typeof data2 !== "boolean")) {
                            validate24.errors = [{ instancePath: instancePath + "/data", schemaPath: "#/definitions/data/type", keyword: "type", params: { type: schema38.type }, message: "must be object,string,array,number,boolean,null" }];
                            return false;
                        }
                        var valid0 = _errs6 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                    if (valid0) {
                        if (data.id !== undefined) {
                            let data3 = data.id;
                            const _errs9 = errors;
                            const _errs10 = errors;
                            if (errors === _errs10) {
                                if (typeof data3 === "string") {
                                    if (func8(data3) < 1) {
                                        validate24.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/definitions/id/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                        return false;
                                    }
                                }
                                else {
                                    validate24.errors = [{ instancePath: instancePath + "/id", schemaPath: "#/definitions/id/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                            }
                            var valid0 = _errs9 === errors;
                        }
                        else {
                            var valid0 = true;
                        }
                        if (valid0) {
                            if (data.time !== undefined) {
                                let data4 = data.time;
                                const _errs12 = errors;
                                const _errs13 = errors;
                                if (errors === _errs13) {
                                    if (errors === _errs13) {
                                        if (typeof data4 === "string") {
                                            if (!(formats0(data4))) {
                                                validate24.errors = [{ instancePath: instancePath + "/time", schemaPath: "#/definitions/time/format", keyword: "format", params: { format: "js-date-time" }, message: "must match format \"" + "js-date-time" + "\"" }];
                                                return false;
                                            }
                                        }
                                        else {
                                            validate24.errors = [{ instancePath: instancePath + "/time", schemaPath: "#/definitions/time/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                            return false;
                                        }
                                    }
                                }
                                var valid0 = _errs12 === errors;
                            }
                            else {
                                var valid0 = true;
                            }
                            if (valid0) {
                                if (data.schemaurl !== undefined) {
                                    let data5 = data.schemaurl;
                                    const _errs15 = errors;
                                    const _errs16 = errors;
                                    if (errors === _errs16) {
                                        if (errors === _errs16) {
                                            if (typeof data5 === "string") {
                                                if (!(formats4.test(data5))) {
                                                    validate24.errors = [{ instancePath: instancePath + "/schemaurl", schemaPath: "#/definitions/schemaurl/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }];
                                                    return false;
                                                }
                                            }
                                            else {
                                                validate24.errors = [{ instancePath: instancePath + "/schemaurl", schemaPath: "#/definitions/schemaurl/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                        }
                                    }
                                    var valid0 = _errs15 === errors;
                                }
                                else {
                                    var valid0 = true;
                                }
                                if (valid0) {
                                    if (data.subject !== undefined) {
                                        let data6 = data.subject;
                                        const _errs18 = errors;
                                        const _errs19 = errors;
                                        if (errors === _errs19) {
                                            if (typeof data6 === "string") {
                                                if (func8(data6) < 1) {
                                                    validate24.errors = [{ instancePath: instancePath + "/subject", schemaPath: "#/definitions/subject/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                                    return false;
                                                }
                                            }
                                            else {
                                                validate24.errors = [{ instancePath: instancePath + "/subject", schemaPath: "#/definitions/subject/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                return false;
                                            }
                                        }
                                        var valid0 = _errs18 === errors;
                                    }
                                    else {
                                        var valid0 = true;
                                    }
                                    if (valid0) {
                                        if (data.type !== undefined) {
                                            let data7 = data.type;
                                            const _errs21 = errors;
                                            const _errs22 = errors;
                                            if (errors === _errs22) {
                                                if (typeof data7 === "string") {
                                                    if (func8(data7) < 1) {
                                                        validate24.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/definitions/type/minLength", keyword: "minLength", params: { limit: 1 }, message: "must NOT have fewer than 1 characters" }];
                                                        return false;
                                                    }
                                                }
                                                else {
                                                    validate24.errors = [{ instancePath: instancePath + "/type", schemaPath: "#/definitions/type/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                    return false;
                                                }
                                            }
                                            var valid0 = _errs21 === errors;
                                        }
                                        else {
                                            var valid0 = true;
                                        }
                                        if (valid0) {
                                            if (data.source !== undefined) {
                                                let data8 = data.source;
                                                const _errs24 = errors;
                                                const _errs25 = errors;
                                                if (errors === _errs25) {
                                                    if (errors === _errs25) {
                                                        if (typeof data8 === "string") {
                                                            if (!(formats4.test(data8))) {
                                                                validate24.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/definitions/source/format", keyword: "format", params: { format: "uri-reference" }, message: "must match format \"" + "uri-reference" + "\"" }];
                                                                return false;
                                                            }
                                                        }
                                                        else {
                                                            validate24.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/definitions/source/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                                            return false;
                                                        }
                                                    }
                                                }
                                                var valid0 = _errs24 === errors;
                                            }
                                            else {
                                                var valid0 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else {
        validate24.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate24.errors = vErrors; return errors === 0; }
function validate23(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate23.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} if (!(validate24(data, { instancePath, parentData, parentDataProperty, rootData }))) {
    vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
    errors = vErrors.length;
} validate23.errors = vErrors; return errors === 0; }
